<h1>FOAFs</h1>

<section>
  <p><%= link_to 'Create a New FOAF', new_foaf_path %></p>
  <table style="margin-bottom: 1em;">
    <tbody>
      <% @foafs.each do |foaf| %>
        <tr>
          <td><%= foaf.name %></td>
          <td>( <%= link_to 'View', foaf %> | <%= link_to 'Edit', edit_foaf_path(foaf) %> | <%= link_to 'Destroy', foaf, method: :delete, data: { confirm: 'Are you sure?' } %> )</td>
        </tr>
      <% end %>
    </tbody>
  </table>
</section>

<section>
  <p>You can also view this page in other formats:</p>
  <ul>
    <li><a href='<%= "#{foafs_path}.ttl" %>'>Turtle</a></li>
    <li><a href='<%= "#{foafs_path}.jsonld" %>'>JSON-LD</a></li>
    <li><a href='<%= "#{foafs_path}.rj" %>'>RDF JSON</a></li>
    <li><a href='<%= "#{foafs_path}.nt" %>'>N-Triples</a></li>
    <li><a href='<%= "#{foafs_path}.rdf" %>'>RDF/XML</a></li>
  </ul>
</section>

<section>
  <div id="canvas"></div>
</section>

<footer>
  <p>
    <button id="redraw" onclick="redraw();">redraw</button>
  </p>
</footer>

<script type="text/javascript">
<!--

var redraw;
var height = 800;
var width = 1200;

/* only do all this when document has finished loading (needed for RaphaelJS) */
window.onload = function() {
    var g = new Graph();

    var render_rectangle = function(r, n) {
      var set = r.set().push(
        /* custom objects go here */
        r.rect(n.point[0]-30, n.point[1]-13, 62, 66).attr({"fill": "#fa8", "stroke-width": 2, r : "9px"})).push(
        r.text(n.point[0], n.point[1] + 20, n.label).attr({"font-size":"14px"}));
        return set;
      };

    <% @foafs.each do |f| %>
      <% f.to_graph(uri_from_foaf(f)).each_statement  do |s| %>
          // g.addNode("<%= shorten_namespace(s.subject) %>");//, { label: "<%= f.name %>", render : render_subject }); //, { label: "Foo", render : render_resource });

          // TODO: make a rectangle if literal.

          <% if shorten_namespace(s.object).start_with? 'lcsh' %>
            g.addNode("<%= shorten_namespace s.object %>", { label : "<%= Interest.find_by(uri: s.object.to_s).label %>" })
          <% end %>

          g.addEdge("<%= shorten_namespace s.subject %>", "<%= shorten_namespace s.object %>", { label : "<%= shorten_namespace s.predicate %>", directed : true });
      <% end %>
    <% end %>

    /* layout the graph using the Spring layout implementation */
    var layouter = new Graph.Layout.Spring(g);
    layouter.layout();
    
    /* draw the graph using the RaphaelJS draw implementation */
    var renderer = new Graph.Renderer.Raphael('canvas', g, width, height);
    renderer.draw();
    
   
    redraw = function() {
        layouter.layout();
        renderer.draw();
    };
};

-->
</script>
